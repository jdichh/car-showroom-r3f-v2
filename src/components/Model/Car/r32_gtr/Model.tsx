/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Object_10: THREE.Mesh;
    Object_11: THREE.Mesh;
    Object_12: THREE.Mesh;
    Object_13: THREE.Mesh;
    Object_14: THREE.Mesh;
    Object_15: THREE.Mesh;
    Object_16: THREE.Mesh;
    Object_17: THREE.Mesh;
    Object_18: THREE.Mesh;
    Object_19: THREE.Mesh;
    Object_2: THREE.Mesh;
    Object_20: THREE.Mesh;
    Object_21: THREE.Mesh;
    Object_22: THREE.Mesh;
    Object_23: THREE.Mesh;
    Object_24: THREE.Mesh;
    Object_25: THREE.Mesh;
    Object_3: THREE.Mesh;
    Object_4: THREE.Mesh;
    Object_5: THREE.Mesh;
    Object_6: THREE.Mesh;
    Object_7: THREE.Mesh;
    Object_8: THREE.Mesh;
    Object_9: THREE.Mesh;
  };
  materials: {
    mirror: THREE.MeshStandardMaterial;
    misc: THREE.MeshStandardMaterial;
    metal: THREE.MeshStandardMaterial;
    orange_glass: THREE.MeshPhysicalMaterial;
    red_glass: THREE.MeshPhysicalMaterial;
    ["brake_disc.001"]: THREE.MeshStandardMaterial;
    ["brake_disc1.001"]: THREE.MeshStandardMaterial;
    interior: THREE.MeshPhysicalMaterial;
    car_paint: THREE.MeshPhysicalMaterial;
    logo1: THREE.MeshStandardMaterial;
    backlight: THREE.MeshStandardMaterial;
    ["nothing."]: THREE.MeshPhysicalMaterial;
    ["numberplate.001"]: THREE.MeshStandardMaterial;
    plastic: THREE.MeshStandardMaterial;
    wheel_metal: THREE.MeshStandardMaterial;
    ["rubber.001"]: THREE.MeshPhysicalMaterial;
    ["plastic.003"]: THREE.MeshStandardMaterial;
    backlight_chrome: THREE.MeshStandardMaterial;
    dark_red_glass: THREE.MeshPhysicalMaterial;
    logo2: THREE.MeshPhysicalMaterial;
    chrome: THREE.MeshStandardMaterial;
    clear_glass: THREE.MeshPhysicalMaterial;
    logo4: THREE.MeshStandardMaterial;
    logo3: THREE.MeshStandardMaterial;
  };
};

export function SkylineR32(props: any) {
  const { nodes, materials } = useGLTF("model/r32.glb") as GLTFResult;
  const carModel = useRef<THREE.Group<THREE.Object3DEventMap>>(null);

  useEffect(() => {
    // enable car shadows
    carModel.current?.traverse((child) => {
      if (child instanceof THREE.Mesh) {
        child.castShadow = true;
        child.receiveShadow = true;
      }
    });

    // car paint
    Object.entries(materials).map((material) => {
      if (material[0] == "car_paint") {
        material[1].color = new THREE.Color(props.color.hexCode);
      }
      material[1].needsUpdate = true;
    });
  }, [materials, props]);

  return (
    <group
      {...props}
      dispose={null}
      ref={carModel}
      rotation={[0, -1.1, 0]}
      scale={1.3}
      position={[0, -1.65, 0]}
    >
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_10.geometry}
          material={materials.mirror}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_11.geometry}
          material={materials.misc}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_12.geometry}
          material={materials.metal}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_13.geometry}
          material={materials.orange_glass}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_14.geometry}
          material={materials.red_glass}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_15.geometry}
          material={materials["brake_disc.001"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_16.geometry}
          material={materials["brake_disc1.001"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_17.geometry}
          material={materials.interior}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_18.geometry}
          material={materials.car_paint}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_19.geometry}
          material={materials.logo1}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_2.geometry}
          material={materials.backlight}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_20.geometry}
          material={materials["nothing."]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_21.geometry}
          material={materials["numberplate.001"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_22.geometry}
          material={materials.plastic}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_23.geometry}
          material={materials.wheel_metal}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_24.geometry}
          material={materials["rubber.001"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_25.geometry}
          material={materials["plastic.003"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_3.geometry}
          material={materials.backlight_chrome}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_4.geometry}
          material={materials.dark_red_glass}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_5.geometry}
          material={materials.logo2}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_6.geometry}
          material={materials.chrome}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_7.geometry}
          material={materials.clear_glass}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_8.geometry}
          material={materials.logo4}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_9.geometry}
          material={materials.logo3}
        />
      </group>
    </group>
  );
}

useGLTF.preload("model/r32.glb");
